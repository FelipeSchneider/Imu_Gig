function [ output_args ] = CF_iNemo(Acc, GyroRate, Magn, fs, gyro_off, gyro_var,...
                            sigmaR, P_guess, acc_lpc, mag_lpc, quat_init
%UNTITLED2 Summary of this function goes here
%   Detailed explanation goes here
    acqSize = length(Acc);
    AccF=zeros(3,acqSize);
    MagnF=zeros(3,acqSize);
    mu=zeros(1,acqSize);
    dqnorm=zeros(1,acqSize);
    dq=zeros(4,acqSize);
    err=zeros(4,acqSize);


    qOsserv=zeros(4,acqSize);   %Observation vector (accelerometer and magnetometer)
    qGyroFilt=zeros(4,acqSize); %Gyrofilt vector
    qFilt=zeros(4,acqSize);     %Filtered vector

    if ~exist('quat_init','var')
            qGyroFilt(:,1)  = [1 0 0 0]';
            qFilt(:,1)      = [1 0 0 0]';
            qOsserv(:,1)    = [1 0 0 0]';
    else
            qGyroFilt(:,1)  = quat_init;
            qFilt(:,1)      = quat_init;
            qOsserv(:,1)    = quat_init;
    end

    [bAcc,aAcc] = butter(4,acc_lpc,'low');
    [bMagn,aMagn] = butter(2,mag_lpc,'low');
    magnF_Length=20;
    accF_Length=20;
    i = 1;
    while(i<=accF_Length+4)

        GyroRate(:,i)=((GyroRate(:,i)-gyro_off(:,1))/180)*pi;
        Acc(:,i)=Acc(:,i)/norm(Acc(:,i));
        Magn(:,i)=Magn(:,i)/norm(Magn(:,i));

        if(i<=accF_Length)
            AccF(:,i)=MyFilter(bAcc,aAcc,Acc(:,:));
        else
            AccF(:,i)=MyFilter(bAcc,aAcc,Acc(:,i-accF_Length:i));
        end
        if(i<=magnF_Length)
            MagnF(:,i)=MyFilter(bMagn,aMagn,Magn(:,:));
        else
            MagnF(:,i)=MyFilter(bMagn,aMagn,Magn(:,i-magnF_Length:i));
        end
        MagnF(:,i)=MagnF(:,i)/norm(MagnF(:,i));
        AccF(:,i)=AccF(:,i)/norm(AccF(:,i));
        i=i+1;
        qOsserv(:,i)=qOsserv(:,i-1);
        qFilt(:,i)=qFilt(:,i-1);
        qGyroFilt(:,i)=qGyroFilt(:,i-1);
    end

    while(i<=acqSize)
        if(i>2)
            dt = toc(t0);
            t=[t t(length(t))+dt];
        end
        %dt=0.015;
        %----Acquisition
            [errre pFD]=calllib('iNEMO2_SDK','INEMO2_GetDataSample',handle_dev,pFD);
            t0 = tic;

            %----------
            pause(0.01)
            %---------

        Acc(1,i)=pFD.Accelerometer.X;
        Acc(2,i)=pFD.Accelerometer.Y;
        Acc(3,i)=pFD.Accelerometer.Z;
        Magn(1,i)=pFD.Magnetometer.X;
        Magn(2,i)=pFD.Magnetometer.Y;
        Magn(3,i)=pFD.Magnetometer.Z;
        GyroRate(1,i)=((pFD.Gyroscope.X-Offset(1,1))/180)*pi;
        GyroRate(2,i)=((-pFD.Gyroscope.Y+Offset(2,1))/180)*pi;
        GyroRate(3,i)=((pFD.Gyroscope.Z-Offset(3,1))/180)*pi;

        GyroRate(1,i)=(GyroRate(1,i)+GyroRate(1,i-1))/2;
        GyroRate(2,i)=(GyroRate(2,i)+GyroRate(2,i-1))/2;
        GyroRate(3,i)=(GyroRate(3,i)+GyroRate(3,i-1))/2;

        %Normalization and filtering
        Acc(:,i)=Acc(:,i)/norm(Acc(:,i));
        Magn(:,i)=Magn(:,i)/norm(Magn(:,i));

        AccF(:,i)=MyFilter(bAcc,aAcc,Acc(:,i-accF_Length:i));
        MagnF(:,i)=MyFilter(bMagn,aMagn,Magn(:,i-magnF_Length:i));

        MagnF(:,i)=MagnF(:,i)/norm(MagnF(:,i));
        AccF(:,i)=AccF(:,i)/norm(AccF(:,i));
        %----End Acquisition



        dq(:,i)=0.5*(QuaternionProduct(qFilt(:,i-1),[0 GyroRate(1,i) GyroRate(2,i) GyroRate(3,i)]'));
        dqnorm(1,i)=norm(dq(:,i));
        mu(1,i)=10*dqnorm(1,i)*dt;
        qOsserv(:,i)=GradientDescent(AccF(:,i),MagnF(:,i),qOsserv(:,i-1),mu(1,i));
        qOsserv(:,i)=qOsserv(:,i)/norm(qOsserv(:,i));

        if(i<=accF_Length+10)
            qGyroFilt(:,i)=qOsserv(:,i);
            qFilt(:,i)=qOsserv(:,i);
        else
            qGyroFilt(:,i)=qFilt(:,i-1)+dq(:,i)*dt;
            qGyroFilt(:,i)=qGyroFilt(:,i)/norm(qGyroFilt(:,i));

            dqnorm(1,i)=norm(dq(:,i));
            mu(1,i)=10*dqnorm(1,i)*dt;
            qOsserv(:,i)=GradientDescent(AccF(:,i),MagnF(:,i),qOsserv(:,i-1),mu(1,i));
            qOsserv(:,i)=qOsserv(:,i)/norm(qOsserv(:,i));

            qFilt(:,i)=qGyroFilt(:,i)*0.98+qOsserv(:,i)*0.02;
            qFilt(:,i)=qFilt(:,i)/norm(qFilt(:,i));


        end
        Angles(:,i)=GetAnglesFromQuaternion(qFilt(:,i));
        i=i+1;

    end

end

